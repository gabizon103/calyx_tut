import "../calyx/primitives/core.futil";

component identity(in:32) -> (out:32) {
  cells {
    r = std_reg(32);    
  }
  wires {
    group save {
      r.in = in;
      r.write_en = 1'd1;
      save[done] = r.done;
    }

    // continuous assignment
    out = r.out;
  }

  control {
    save;
  }
}

component main() -> () {
  cells {
    id = identity();
    current_value = std_reg(32);
  }

  wires {
    // saves 10 in identity group
    group run_id {
      id.in = 32'd10;

      // "run" id
      id.go = 1'd1;
      run_id[done] = id.done;
    }

    // observe value in id
    group use_id {
      current_value.in = id.out;
      current_value.write_en = 1'd1;
      use_id[done] = current_value.done;
    }
  }

  control {
    seq {
      run_id;
      use_id;
    }
  }
}