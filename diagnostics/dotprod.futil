import "../calyx/primitives/core.futil";
import "../calyx/primitives/binary_operators.futil";

// do the dotprod in main, don't have to pass anything by reference

// took < 30 sec to simulate
component main() -> () {
  cells {
    @external(1) memA = std_mem_d2(32,4,4,4,4);
    @external(1) memB = std_mem_d2(32,4,4,4,4);

    // where we put the output
    @external(1) memC = std_mem_d2(32,4,4,4,4);

    row = std_const(4,0);
    col = std_const(4,0);

    // for reading an element from memories
    A_elt = std_reg(32);
    B_elt = std_reg(32);

    // LOOP THINGS
    // keeping track of how many things to add
    counter = std_reg(4);

    // adder for incrementing counter
    add_cond = std_add(4);

    // for computing condition
    lt_cond = std_lt(4);

    // accumulator for result
    accum = std_reg(32);

    // adder for accumulator
    add_accum = std_add(32);

    // multiplier for computing dot prod
    mult0 = std_mult_pipe(32);

    // multiplier for computing addr
    mult_addr = std_mult_pipe(32);

    // adder for computing addr
    add_addr = std_add(32);

    // for storing result of each multiplication
    prod = std_reg(32);
    prod1 = std_reg(32);
  }
  wires {
    // put 0 in counter
    group init {
      counter.in = 4'd0;
      counter.write_en = 1'd1;
      init[done] = counter.done;
    }

    // loop condition - counter < 4 (because 4x4 matrices)
    comb group cond {
      lt_cond.left = counter.out;
      lt_cond.right = 4'd4;
    }

    // read from mem A
    group readA {
      memA.addr0 = row.out;
      memA.addr1 = counter.out;
      A_elt.write_en = 1'd1;
      A_elt.in = memA.read_data;
      readA[done] = A_elt.done;
    }

    // read from mem B
    group readB {
      memB.addr0 = counter.out;
      memB.addr1 = col.out;
      B_elt.write_en = 1'd1;
      B_elt.in = memB.read_data;
      readB[done] = B_elt.done;
    }

    // perform A[i] * B[i]
    group doMult {
      prod.in = mult0.out;
      prod.write_en = mult0.done;
      doMult[done] = prod.done;
      mult0.left = A_elt.out;
      mult0.right = B_elt.out;
      mult0.go = !mult0.done ? 1'd1;
    }

    // store result of mult
    group updResult {
      prod1.in = prod.out;
      prod1.write_en = 1'd1;
      updResult[done] = prod1.done;
    }

    // result += A[i] * B[i]
    group addResult {
      memC.addr0 = row.out;
      memC.addr1 = col.out;
      add_accum.left = prod1.out;
      add_accum.right = memC.read_data;
      memC.write_en = 1'd1;
      memC.write_data = add_accum.out;
      addResult[done] = memC.done;
    }

    // increment counter
    group incr {
      add_cond.left = counter.out;
      add_cond.right = 4'd1;
      counter.in = add_cond.out;
      counter.write_en = 1'd1;
      incr[done] = counter.done ? 1'd1;
    }
  }
  control {
    seq {
      init;
      while lt_cond.out with cond {
        seq {
          readA;
          readB;
          doMult;
          updResult;
          addResult;
          incr;
        }
      }
      
    }
  }
}